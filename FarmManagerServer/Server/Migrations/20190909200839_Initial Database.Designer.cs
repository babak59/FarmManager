// <auto-generated />
using System;
using Domain.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Server.Migrations
{
    [DbContext(typeof(FarmManagerDbContext))]
    [Migration("20190909200839_Initial Database")]
    partial class InitialDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(19)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("companies");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(19)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint(19)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasName("FKEmployeeUser");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("Domain.Entities.Farm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(19)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint(19)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .HasName("FKFarmEmployee");

                    b.ToTable("farms");
                });

            modelBuilder.Entity("Domain.Entities.FarmTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(19)");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint(19)");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000)");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint(19)");

                    b.Property<long>("FieldId")
                        .HasColumnType("bigint(19)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EmployeeId")
                        .HasName("FKTaskCreator");

                    b.HasIndex("FieldId")
                        .HasName("FKTaskField");

                    b.ToTable("farm_tasks");
                });

            modelBuilder.Entity("Domain.Entities.Field", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(19)");

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("Exploitation")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<long>("FarmId")
                        .HasColumnType("bigint(19)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FarmId")
                        .HasName("FKFieldFarm");

                    b.ToTable("fields");
                });

            modelBuilder.Entity("Domain.Entities.Machine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(19)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<long>("FarmId")
                        .HasColumnType("bigint(19)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("FarmId")
                        .HasName("FKMachineFarm");

                    b.ToTable("machines");
                });

            modelBuilder.Entity("Domain.Entities.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)");

                    b.Property<long>("FarmId")
                        .HasColumnType("bigint(19)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TypeOfResource")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FarmId")
                        .HasName("FKResourceFarm");

                    b.ToTable("resources");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(19)");

                    b.Property<bool>("CommonUses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(70)");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Domain.Entities.TaskEquipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(19)");

                    b.Property<long>("FarmTaskId")
                        .HasColumnName("TaskId")
                        .HasColumnType("bigint(19)");

                    b.Property<long>("MachineId")
                        .HasColumnType("bigint(19)");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int(10)");

                    b.HasKey("Id");

                    b.HasIndex("FarmTaskId")
                        .HasName("FKTaskEquipTask");

                    b.HasIndex("MachineId")
                        .HasName("FKTaskEquipMachine");

                    b.HasIndex("ResourceId")
                        .HasName("FKTaskEquipmResource");

                    b.ToTable("task_equipments");
                });

            modelBuilder.Entity("Domain.Entities.Token", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(19)");

                    b.Property<string>("TargetEmail")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("TokenValid");

                    b.Property<long>("UserId");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("tokens");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(19)");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("BlockToDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CompanyId");

                    b.Property<string>("ConfirmationToken")
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("ConfirmationTokenValid")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateRegistration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("LastSucessfulLogin")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastWrongLogin")
                        .HasColumnType("datetime");

                    b.Property<int>("NumberOfWrongAttempts")
                        .HasColumnType("int(3)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("tinyblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("tinyblob");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("ResetPasswordTokenValid")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .HasName("FKUserCompany");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UsersUniqueEmail");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasName("UsersUniqueUserName");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(19)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint(19)");

                    b.Property<bool?>("UpToDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValue(true);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint(19)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId")
                        .HasName("FKUserRoleRole");

                    b.HasIndex("UserId")
                        .HasName("FKUserRoleUser");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("Domain.Entities.WorkflowAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("workflow_actions");
                });

            modelBuilder.Entity("Domain.Entities.WorkflowStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)");

                    b.Property<string>("Code");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("WflStatusesUniqueCode");

                    b.ToTable("workflow_statuses");
                });

            modelBuilder.Entity("Domain.Entities.WorkflowStatusAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)");

                    b.Property<bool>("HasEmailNotification")
                        .HasColumnType("bit(1)");

                    b.Property<bool>("IsOwnerAction")
                        .HasColumnType("bit(1)");

                    b.Property<int>("WorkflowActionId")
                        .HasColumnType("int(10)");

                    b.Property<string>("WorkflowActionName")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("WorkflowCurrentStatusId")
                        .HasColumnType("int(10)");

                    b.Property<string>("WorkflowCurrentStatusName")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("WorkflowTargetStatusId")
                        .HasColumnType("int(10)");

                    b.Property<string>("WorkflowTargetStatusName")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowActionId")
                        .HasName("FKWflStatusActionWflAction");

                    b.HasIndex("WorkflowCurrentStatusId")
                        .HasName("FKWflStatusActionWflCurrentStatus");

                    b.HasIndex("WorkflowTargetStatusId")
                        .HasName("FKWflStatusActionWflTargetStatus");

                    b.ToTable("workflow_status_actions");
                });

            modelBuilder.Entity("Domain.Entities.WorkflowTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(19)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<long>("FarmTaskId")
                        .HasColumnName("TaskId")
                        .HasColumnType("bigint(19)");

                    b.Property<string>("Symbol")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("WorkflowActionId")
                        .HasColumnType("int(10)");

                    b.Property<string>("WorkflowActionName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WorkflowStatusCode")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("WorkflowStatusId")
                        .HasColumnType("int(10)");

                    b.Property<string>("WorkflowStatusName")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FarmTaskId")
                        .HasName("FKWflTaskTask");

                    b.HasIndex("WorkflowActionId")
                        .HasName("FKWflTaskWflAction");

                    b.HasIndex("WorkflowStatusId")
                        .HasName("FKWflTaskWflStatus");

                    b.ToTable("workflow_tasks");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FKEmployeeUser")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entities.Farm", b =>
                {
                    b.HasOne("Domain.Entities.Employee", "Owner")
                        .WithMany("Farms")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FKFarmEmployee")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entities.FarmTask", b =>
                {
                    b.HasOne("Domain.Entities.Employee", "Creator")
                        .WithMany("CreatedFarmTasks")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FKTaskCreator")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Employee", "Employee")
                        .WithMany("FarmTasks")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FKTaskEmployee")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Field", "Field")
                        .WithMany("FarmTasks")
                        .HasForeignKey("FieldId")
                        .HasConstraintName("FKTaskField")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entities.Field", b =>
                {
                    b.HasOne("Domain.Entities.Farm", "Farm")
                        .WithMany("Fields")
                        .HasForeignKey("FarmId")
                        .HasConstraintName("FKFieldFarm")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entities.Machine", b =>
                {
                    b.HasOne("Domain.Entities.Farm", "Farm")
                        .WithMany("Machines")
                        .HasForeignKey("FarmId")
                        .HasConstraintName("FKMachineFarm")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entities.Resource", b =>
                {
                    b.HasOne("Domain.Entities.Farm", "Farm")
                        .WithMany("Resources")
                        .HasForeignKey("FarmId")
                        .HasConstraintName("FKResourceFarm")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entities.TaskEquipment", b =>
                {
                    b.HasOne("Domain.Entities.FarmTask", "FarmTask")
                        .WithMany("TaskEquipments")
                        .HasForeignKey("FarmTaskId")
                        .HasConstraintName("FKTaskEquipTask")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Machine", "Machine")
                        .WithMany("TaskEquipments")
                        .HasForeignKey("MachineId")
                        .HasConstraintName("FKTaskEquipMachine")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Resource", "Resource")
                        .WithMany("TaskEquipments")
                        .HasForeignKey("ResourceId")
                        .HasConstraintName("FKTaskEquipmResource")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entities.Token", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FKTokenUser")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FKUserCompany")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FKUserRoleRole");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FKUserRoleUser");
                });

            modelBuilder.Entity("Domain.Entities.WorkflowStatusAction", b =>
                {
                    b.HasOne("Domain.Entities.WorkflowAction", "WorkflowAction")
                        .WithMany("WorkflowStatusActions")
                        .HasForeignKey("WorkflowActionId")
                        .HasConstraintName("FKWflStatusActionWflAction")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.WorkflowStatus", "WorkflowCurrentStatus")
                        .WithMany("WorkflowCurrentStateActions")
                        .HasForeignKey("WorkflowCurrentStatusId")
                        .HasConstraintName("FKWflStatusActionWflCurrentStatus")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.WorkflowStatus", "WorkflowTargetStatus")
                        .WithMany("WorkflowTargetStateActions")
                        .HasForeignKey("WorkflowTargetStatusId")
                        .HasConstraintName("FKWflStatusActionWflTargetStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entities.WorkflowTask", b =>
                {
                    b.HasOne("Domain.Entities.FarmTask", "FarmTask")
                        .WithMany("WorkflowTasks")
                        .HasForeignKey("FarmTaskId")
                        .HasConstraintName("FKWflTaskTask")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.WorkflowAction", "WorkflowAction")
                        .WithMany("WorkflowTasks")
                        .HasForeignKey("WorkflowActionId")
                        .HasConstraintName("FKWflTaskWflAction")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.WorkflowStatus", "WorkflowStatus")
                        .WithMany("WorkflowTask")
                        .HasForeignKey("WorkflowStatusId")
                        .HasConstraintName("FKWflTaskWflStatus")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
